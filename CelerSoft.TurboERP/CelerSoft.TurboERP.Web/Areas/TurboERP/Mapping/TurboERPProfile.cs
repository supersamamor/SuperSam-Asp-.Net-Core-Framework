using AutoMapper;
using CelerSoft.TurboERP.Core.TurboERP;
using CelerSoft.TurboERP.Web.Areas.TurboERP.Models;
using CelerSoft.TurboERP.Application.Features.TurboERP.Approval.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Unit.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.ItemType.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Item.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Brand.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Product.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.ProductImage.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Customer.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Supplier.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.CustomerContactPerson.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.SupplierContactPerson.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.PurchaseRequisition.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.PurchaseRequisitionItem.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.SupplierQuotation.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.SupplierQuotationItem.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Purchase.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.PurchaseItem.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Inventory.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.InventoryHistory.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.ShoppingCart.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.Order.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.OrderItem.Commands;
using CelerSoft.TurboERP.Application.Features.TurboERP.WebContent.Commands;


namespace CelerSoft.TurboERP.Web.Areas.TurboERP.Mapping;

public class TurboERPProfile : Profile
{
    public TurboERPProfile()
    {
        CreateMap<UnitViewModel, AddUnitCommand>();
		CreateMap<UnitViewModel, EditUnitCommand>();
		CreateMap<UnitState, UnitViewModel>().ReverseMap();
		CreateMap<ItemTypeViewModel, AddItemTypeCommand>();
		CreateMap<ItemTypeViewModel, EditItemTypeCommand>();
		CreateMap<ItemTypeState, ItemTypeViewModel>().ReverseMap();
		CreateMap<ItemViewModel, AddItemCommand>();
		CreateMap<ItemViewModel, EditItemCommand>();
		CreateMap<ItemState, ItemViewModel>().ForPath(e => e.ForeignKeyItemType, o => o.MapFrom(s => s.ItemType!.Name)).ForPath(e => e.ForeignKeyUnit, o => o.MapFrom(s => s.Unit!.Name));
		CreateMap<ItemViewModel, ItemState>();
		CreateMap<BrandViewModel, AddBrandCommand>();
		CreateMap<BrandViewModel, EditBrandCommand>();
		CreateMap<BrandState, BrandViewModel>().ReverseMap();
		CreateMap<ProductViewModel, AddProductCommand>();
		CreateMap<ProductViewModel, EditProductCommand>();
		CreateMap<ProductState, ProductViewModel>().ForPath(e => e.ForeignKeyBrand, o => o.MapFrom(s => s.Brand!.Name)).ForPath(e => e.ForeignKeyItem, o => o.MapFrom(s => s.Item!.Code));
		CreateMap<ProductViewModel, ProductState>();
		CreateMap<ProductImageViewModel, AddProductImageCommand>().ForPath(e => e.Path, o => o.MapFrom(s => s.GeneratedPathPath));
		CreateMap<ProductImageViewModel, EditProductImageCommand>().ForPath(e => e.Path, o => o.MapFrom(s => s.GeneratedPathPath));
		CreateMap<ProductImageState, ProductImageViewModel>().ForPath(e => e.ForeignKeyProduct, o => o.MapFrom(s => s.Product!.BarcodeNumber));
		CreateMap<ProductImageViewModel, ProductImageState>();
		CreateMap<CustomerViewModel, AddCustomerCommand>();
		CreateMap<CustomerViewModel, EditCustomerCommand>();
		CreateMap<CustomerState, CustomerViewModel>().ReverseMap();
		CreateMap<SupplierViewModel, AddSupplierCommand>();
		CreateMap<SupplierViewModel, EditSupplierCommand>();
		CreateMap<SupplierState, SupplierViewModel>().ReverseMap();
		CreateMap<CustomerContactPersonViewModel, AddCustomerContactPersonCommand>();
		CreateMap<CustomerContactPersonViewModel, EditCustomerContactPersonCommand>();
		CreateMap<CustomerContactPersonState, CustomerContactPersonViewModel>().ForPath(e => e.ForeignKeyCustomer, o => o.MapFrom(s => s.Customer!.TINNumber));
		CreateMap<CustomerContactPersonViewModel, CustomerContactPersonState>();
		CreateMap<SupplierContactPersonViewModel, AddSupplierContactPersonCommand>();
		CreateMap<SupplierContactPersonViewModel, EditSupplierContactPersonCommand>();
		CreateMap<SupplierContactPersonState, SupplierContactPersonViewModel>().ForPath(e => e.ForeignKeySupplier, o => o.MapFrom(s => s.Supplier!.Company));
		CreateMap<SupplierContactPersonViewModel, SupplierContactPersonState>();
		CreateMap<PurchaseRequisitionViewModel, AddPurchaseRequisitionCommand>();
		CreateMap<PurchaseRequisitionViewModel, EditPurchaseRequisitionCommand>();
		CreateMap<PurchaseRequisitionState, PurchaseRequisitionViewModel>().ReverseMap();
		CreateMap<PurchaseRequisitionItemViewModel, AddPurchaseRequisitionItemCommand>();
		CreateMap<PurchaseRequisitionItemViewModel, EditPurchaseRequisitionItemCommand>();
		CreateMap<PurchaseRequisitionItemState, PurchaseRequisitionItemViewModel>().ForPath(e => e.ForeignKeyPurchaseRequisition, o => o.MapFrom(s => s.PurchaseRequisition!.Id)).ForPath(e => e.ForeignKeyProduct, o => o.MapFrom(s => s.Product!.BarcodeNumber));
		CreateMap<PurchaseRequisitionItemViewModel, PurchaseRequisitionItemState>();
		CreateMap<SupplierQuotationViewModel, AddSupplierQuotationCommand>();
		CreateMap<SupplierQuotationViewModel, EditSupplierQuotationCommand>();
		CreateMap<SupplierQuotationState, SupplierQuotationViewModel>().ForPath(e => e.ForeignKeySupplier, o => o.MapFrom(s => s.Supplier!.Company)).ForPath(e => e.ForeignKeyPurchaseRequisition, o => o.MapFrom(s => s.PurchaseRequisition!.Id));
		CreateMap<SupplierQuotationViewModel, SupplierQuotationState>();
		CreateMap<SupplierQuotationItemViewModel, AddSupplierQuotationItemCommand>();
		CreateMap<SupplierQuotationItemViewModel, EditSupplierQuotationItemCommand>();
		CreateMap<SupplierQuotationItemState, SupplierQuotationItemViewModel>().ForPath(e => e.ForeignKeySupplierQuotation, o => o.MapFrom(s => s.SupplierQuotation!.Id)).ForPath(e => e.ForeignKeyProduct, o => o.MapFrom(s => s.Product!.BarcodeNumber));
		CreateMap<SupplierQuotationItemViewModel, SupplierQuotationItemState>();
		CreateMap<PurchaseViewModel, AddPurchaseCommand>();
		CreateMap<PurchaseViewModel, EditPurchaseCommand>();
		CreateMap<PurchaseState, PurchaseViewModel>().ForPath(e => e.ForeignKeyPurchaseRequisition, o => o.MapFrom(s => s.PurchaseRequisition!.Id)).ForPath(e => e.ForeignKeySupplierQuotation, o => o.MapFrom(s => s.SupplierQuotation!.Id));
		CreateMap<PurchaseViewModel, PurchaseState>();
		CreateMap<PurchaseItemViewModel, AddPurchaseItemCommand>();
		CreateMap<PurchaseItemViewModel, EditPurchaseItemCommand>();
		CreateMap<PurchaseItemState, PurchaseItemViewModel>().ForPath(e => e.ForeignKeyProduct, o => o.MapFrom(s => s.Product!.BarcodeNumber)).ForPath(e => e.ForeignKeySupplierQuotationItem, o => o.MapFrom(s => s.SupplierQuotationItem!.Id));
		CreateMap<PurchaseItemViewModel, PurchaseItemState>();
		CreateMap<InventoryViewModel, AddInventoryCommand>();
		CreateMap<InventoryViewModel, EditInventoryCommand>();
		CreateMap<InventoryState, InventoryViewModel>().ForPath(e => e.ForeignKeyPurchaseItem, o => o.MapFrom(s => s.PurchaseItem!.Id)).ForPath(e => e.ForeignKeyProduct, o => o.MapFrom(s => s.Product!.BarcodeNumber));
		CreateMap<InventoryViewModel, InventoryState>();
		CreateMap<InventoryHistoryViewModel, AddInventoryHistoryCommand>();
		CreateMap<InventoryHistoryViewModel, EditInventoryHistoryCommand>();
		CreateMap<InventoryHistoryState, InventoryHistoryViewModel>().ForPath(e => e.ForeignKeyInventory, o => o.MapFrom(s => s.Inventory!.Id));
		CreateMap<InventoryHistoryViewModel, InventoryHistoryState>();
		CreateMap<ShoppingCartViewModel, AddShoppingCartCommand>();
		CreateMap<ShoppingCartViewModel, EditShoppingCartCommand>();
		CreateMap<ShoppingCartState, ShoppingCartViewModel>().ForPath(e => e.ForeignKeyInventory, o => o.MapFrom(s => s.Inventory!.Id));
		CreateMap<ShoppingCartViewModel, ShoppingCartState>();
		CreateMap<OrderViewModel, AddOrderCommand>();
		CreateMap<OrderViewModel, EditOrderCommand>();
		CreateMap<OrderState, OrderViewModel>().ForPath(e => e.ForeignKeyCustomer, o => o.MapFrom(s => s.Customer!.TINNumber));
		CreateMap<OrderViewModel, OrderState>();
		CreateMap<OrderItemViewModel, AddOrderItemCommand>();
		CreateMap<OrderItemViewModel, EditOrderItemCommand>();
		CreateMap<OrderItemState, OrderItemViewModel>().ForPath(e => e.ForeignKeyInventory, o => o.MapFrom(s => s.Inventory!.Id)).ForPath(e => e.ForeignKeyOrder, o => o.MapFrom(s => s.Order!.Code));
		CreateMap<OrderItemViewModel, OrderItemState>();
		CreateMap<WebContentViewModel, AddWebContentCommand>();
		CreateMap<WebContentViewModel, EditWebContentCommand>();
		CreateMap<WebContentState, WebContentViewModel>().ReverseMap();
		
		CreateMap<ApproverAssignmentState, ApproverAssignmentViewModel>().ReverseMap();
		CreateMap<ApproverSetupViewModel, EditApproverSetupCommand>();
		CreateMap<ApproverSetupViewModel, AddApproverSetupCommand>();
		CreateMap<ApproverSetupState, ApproverSetupViewModel>().ReverseMap();
    }
}
