// <auto-generated />
using System;
using CTI.ELMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTI.ELMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221104003348_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CTI.Common.Data.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryKey");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ActivityHistoryState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClientFeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadTaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NextStepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PCTDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitsInformation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityID");

                    b.HasIndex("ClientFeedbackId");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadTaskId");

                    b.HasIndex("NextStepId");

                    b.ToTable("ActivityHistory");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ActivityState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClientFeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeadTaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NextStepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PCTDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientFeedbackId");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadID");

                    b.HasIndex("LeadTaskId");

                    b.HasIndex("NextStepId");

                    b.HasIndex("ProjectID");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.AnnualIncrementHistoryState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("BasicFixedMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ContractGroupingCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MinimumMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PercentageRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("UnitOfferedHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("UnitOfferedHistoryID");

                    b.ToTable("AnnualIncrementHistory");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.AnnualIncrementState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("BasicFixedMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MinimumMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PercentageRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("UnitOfferedID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("UnitOfferedID");

                    b.ToTable("AnnualIncrement");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApprovalRecordState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApproverSetupId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverSetupId");

                    b.HasIndex("DataId");

                    b.HasIndex("Status");

                    b.ToTable("ApprovalRecord");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApprovalState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApprovalRecordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApprovalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApproverUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EmailSendingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailSendingRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSendingStatus")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StatusUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalRecordId");

                    b.HasIndex("ApproverUserId");

                    b.HasIndex("EmailSendingStatus");

                    b.HasIndex("Status");

                    b.ToTable("Approval");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApproverAssignmentState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApproverRoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApproverSetupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApproverType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApproverUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverSetupId", "ApproverUserId", "ApproverRoleId")
                        .IsUnique()
                        .HasFilter("[ApproverUserId] IS NOT NULL AND [ApproverRoleId] IS NOT NULL");

                    b.ToTable("ApproverAssignment");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApproverSetupState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApprovalSetupType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApprovalType")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowName", "ApprovalSetupType", "TableName", "Entity")
                        .IsUnique()
                        .HasFilter("[WorkflowName] IS NOT NULL AND [TableName] IS NOT NULL AND [Entity] IS NOT NULL");

                    b.ToTable("ApproverSetup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.BusinessNatureCategoryState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessNatureCategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessNatureCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessNatureSubItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessNatureSubItemID");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.ToTable("BusinessNatureCategory");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.BusinessNatureState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessNatureCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BusinessNatureName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessNatureCode")
                        .IsUnique()
                        .HasFilter("[BusinessNatureCode] IS NOT NULL");

                    b.HasIndex("BusinessNatureName")
                        .IsUnique();

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.ToTable("BusinessNature");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.BusinessNatureSubItemState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessNatureID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessNatureSubItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessNatureSubItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessNatureID");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.ToTable("BusinessNatureSubItem");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ClientFeedbackState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientFeedbackName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientFeedbackName")
                        .IsUnique();

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.ToTable("ClientFeedback");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ContactPersonState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<bool>("IsANSignatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCOLSignatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSOARecipient")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LeadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Position")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("SalutationID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadId");

                    b.HasIndex("SalutationID");

                    b.ToTable("ContactPerson");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ContactState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadID");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.EntityGroupState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EntityAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EntityDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityShortName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PPLUSEntityCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("PPlusConnectionSetupID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TINNo")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("PPlusConnectionSetupID");

                    b.ToTable("EntityGroup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCAARAllocationState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantContractNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("ProjectID");

                    b.ToTable("IFCAARAllocation");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCAARLedgerState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GLAccount")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LedgerDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LineNo")
                        .HasColumnType("int");

                    b.Property<string>("LotNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferenceNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<string>("TaxScheme")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenantContractNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("TransactionClass")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TransactionDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("TransactionTaxAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TransactionTaxBaseAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("TransactionWithHoldingTaxAmount")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("ProjectID");

                    b.ToTable("IFCAARLedger");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCATenantInformationState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Allowance")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAnchor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExhibit")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfferingID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PaidSecurityDeposit")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ProjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TINNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenantCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenantClassification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenantContractNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("OfferingID");

                    b.HasIndex("ProjectID");

                    b.ToTable("IFCATenantInformation");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCATransactionTypeState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TransCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TransGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("EntityID");

                    b.HasIndex("LastModifiedDate");

                    b.ToTable("IFCATransactionType");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCAUnitInformationState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("BasicFixedMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("BudgetedAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IFCATenantInformationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("RentalRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("IFCATenantInformationID");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("UnitID");

                    b.ToTable("IFCAUnitInformation");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadSourceState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadSourceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadSourceName")
                        .IsUnique();

                    b.ToTable("LeadSource");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BusinessNatureCategoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessNatureID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessNatureSubItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFranchise")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadSourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeadTouchpointId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationTypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TINNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessNatureCategoryID");

                    b.HasIndex("BusinessNatureID");

                    b.HasIndex("BusinessNatureSubItemID");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadSourceId");

                    b.HasIndex("LeadTouchpointId");

                    b.HasIndex("OperationTypeID");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadTaskClientFeedBackState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityStatus")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ClientFeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadTaskId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientFeedbackId");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadTaskId");

                    b.ToTable("LeadTaskClientFeedBack");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadTaskNextStepState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientFeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadTaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NextStepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PCTDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientFeedbackId");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadTaskId");

                    b.HasIndex("NextStepId");

                    b.ToTable("LeadTaskNextStep");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadTaskState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadTaskName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadTaskName")
                        .IsUnique();

                    b.ToTable("LeadTask");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadTouchPointState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadTouchPointName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadTouchPointName")
                        .IsUnique();

                    b.ToTable("LeadTouchPoint");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.NextStepState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextStepTaskName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("NextStepTaskName")
                        .IsUnique();

                    b.ToTable("NextStep");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.OfferingHistoryState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ANType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("AnnualAdvertisingFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("AutoComputeAnnualAdvertisingFee")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoComputeTotalConstructionBond")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoComputeTotalSecurityDeposit")
                        .HasColumnType("bit");

                    b.Property<decimal?>("BoardUp")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CAMCConstructionTotalUnitArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("CommencementCAMC")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("CommencementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Concession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ConstructionCAMC")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ConstructionCAMCMonths")
                        .HasColumnType("int");

                    b.Property<decimal?>("ConstructionCAMCRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ConstructionMonths")
                        .HasColumnType("int");

                    b.Property<int?>("ConstructionPayableWithinMonths")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FitOutPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("HasBoardUpFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPOS")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MinimumSalesQuota")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("OfferingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OfferingVersion")
                        .HasColumnType("int");

                    b.Property<string>("OffersheetRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OtherChargesAircon")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Probability")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Provision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecMonths")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityDepositPayableWithinMonths")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalBasicFixedMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalConstructionBond")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalLotBudget")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalMinimumMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalPercentageRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalSecurityDeposit")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalUnitArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("TurnOverDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitsInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadID");

                    b.HasIndex("OfferingID");

                    b.HasIndex("ProjectID");

                    b.ToTable("OfferingHistory");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.OfferingState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ANSignatoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ANSignatoryPosition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ANTermTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ANType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("AnnualAdvertisingFee")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("AutoComputeAnnualAdvertisingFee")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoComputeTotalConstructionBond")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoComputeTotalSecurityDeposit")
                        .HasColumnType("bit");

                    b.Property<string>("AwardNoticeCreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AwardNoticeCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("BoardUp")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CAMCConstructionTotalUnitArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("CommencementCAMC")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("CommencementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Concession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ConstructionCAMC")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ConstructionCAMCMonths")
                        .HasColumnType("int");

                    b.Property<decimal?>("ConstructionCAMCRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ConstructionMonths")
                        .HasColumnType("int");

                    b.Property<int?>("ConstructionPayableWithinMonths")
                        .HasColumnType("int");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ContractTypeID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<decimal?>("DocStamp")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FitOutPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ForFinalPrintLeaseContractDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ForReviewLeaseContractDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBoardUpFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabledModifiedCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPOS")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeadID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeaseContractCreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LeaseContractCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeaseContractStatus")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MinimumSalesQuota")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ModifiedCategory")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("OfferSheetPerProjectCounter")
                        .HasColumnType("int");

                    b.Property<int?>("OfferingHistoryID")
                        .HasColumnType("int");

                    b.Property<string>("OffersheetRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OtherChargesAircon")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("PermittedUse")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Probability")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Provision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecMonths")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityDepositPayableWithinMonths")
                        .HasColumnType("int");

                    b.Property<string>("SignatoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SignatoryPosition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("SignedAwardNoticeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SignedLeaseContractDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SignedOfferSheetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagForFinalPrintLeaseContractBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagForReviewLeaseContractBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagSignedAwardNoticeBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagSignedLeaseContractBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagSignedOfferSheetBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantContractNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalBasicFixedMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalConstructionBond")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalLotBudget")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalMinimumMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalPercentageRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalSecurityDeposit")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalUnitArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("TurnOverDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitsInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WitnessName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("LeadID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Offering");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.OperationTypeState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("OperationTypeName")
                        .IsUnique();

                    b.ToTable("OperationType");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.PPlusConnectionSetupState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExhibitThemeCodes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PPlusVersionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TablePrefix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("PPlusVersionName")
                        .IsUnique();

                    b.ToTable("PPlusConnectionSetup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.PreSelectedUnitState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LotArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("LotBudget")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("OfferingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("OfferingID");

                    b.HasIndex("UnitID");

                    b.ToTable("PreSelectedUnit");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ProjectState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ANSignatoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ANSignatoryPosition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContractSignatory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContractSignatoryPosition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContractSignatoryProofOfIdentity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContractSignatoryWitness")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContractSignatoryWitnessPosition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatabaseSource")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("GLA")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("HasAssociationDues")
                        .HasColumnType("bit");

                    b.Property<string>("IFCAProjectCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LandArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("OutsideFC")
                        .HasColumnType("bit");

                    b.Property<string>("PayableTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProjectGreetingsSection")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectNameANSection")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProjectShortName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SignatoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SignatoryPosition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SignatureLower")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SignatureUpper")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("EntityGroupId");

                    b.HasIndex("LastModifiedDate");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ReportTableCollectionDetailState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Column1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Column2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Column3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Column4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CurrentMonth")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("CusaAC")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("Deposits")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("IFCATenantInformationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Interests")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<decimal?>("Others")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PaidSD")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PayableCurrentMonth")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PayablePrevMonth1")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PayablePrevMonth2")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PayablePrevMonth3")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PayablePrior")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PrevMonth1")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PrevMonth2")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PrevMonth3")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("Prior")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Rental")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("SDExposure")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TotalOverDue")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("Utilities")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("IFCATenantInformationID");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("ProjectID");

                    b.ToTable("ReportTableCollectionDetail");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ReportTableYTDExpirySummaryState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityShortName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("ExpiryLotArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("LandArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("NewLeases")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("OrderBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Renewed")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("ReportYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalGLA")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("VerticalOrderBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("WithProspectNego")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.ToTable("ReportTableYTDExpirySummary");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.SalutationState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalutationDescription")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("SalutationDescription")
                        .IsUnique();

                    b.ToTable("Salutation");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitActivityState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityHistoryID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("UnitID");

                    b.ToTable("UnitActivity");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitBudgetState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("April")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("August")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("December")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("February")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsOriginalBudgeted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("January")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("July")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("June")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LotArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("March")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("May")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("November")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("October")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ParentUnitBudgetID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("September")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("UnitID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("ParentUnitBudgetID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.ToTable("UnitBudget");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitGroupState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaTypeDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("BasicFixedMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFixedMonthlyRent")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LotArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("OfferingHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UnitOfferedHistoryID")
                        .HasColumnType("int");

                    b.Property<string>("UnitsInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("OfferingHistoryID");

                    b.ToTable("UnitGroup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitOfferedHistoryState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("AnnualIncrement")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("AnnualIncrementInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BasicFixedMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFixedMonthlyRent")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LotArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("LotBudget")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("MinimumMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("OfferingHistoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OfferingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PercentageRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("UnitID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("OfferingHistoryID");

                    b.HasIndex("OfferingID");

                    b.HasIndex("UnitID");

                    b.ToTable("UnitOfferedHistory");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitOfferedState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("AnnualIncrement")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("AnnualIncrementInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BasicFixedMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFixedMonthlyRent")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LotArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("LotBudget")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("MinimumMonthlyRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("OfferingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PercentageRent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("UnitID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("OfferingID");

                    b.HasIndex("UnitID");

                    b.ToTable("UnitOffered");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AvailabilityDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CommencementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentTenantContractNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LotArea")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("LotBudget")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ProjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("ProjectID");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UserProjectAssignmentState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Entity");

                    b.HasIndex("LastModifiedDate");

                    b.HasIndex("ProjectID");

                    b.ToTable("UserProjectAssignment");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ActivityHistoryState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ActivityState", "Activity")
                        .WithMany("ActivityHistoryList")
                        .HasForeignKey("ActivityID");

                    b.HasOne("CTI.ELMS.Core.ELMS.ClientFeedbackState", "ClientFeedback")
                        .WithMany("ActivityHistoryList")
                        .HasForeignKey("ClientFeedbackId");

                    b.HasOne("CTI.ELMS.Core.ELMS.LeadTaskState", "LeadTask")
                        .WithMany("ActivityHistoryList")
                        .HasForeignKey("LeadTaskId");

                    b.HasOne("CTI.ELMS.Core.ELMS.NextStepState", "NextStep")
                        .WithMany("ActivityHistoryList")
                        .HasForeignKey("NextStepId");

                    b.Navigation("Activity");

                    b.Navigation("ClientFeedback");

                    b.Navigation("LeadTask");

                    b.Navigation("NextStep");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ActivityState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ClientFeedbackState", "ClientFeedback")
                        .WithMany("ActivityList")
                        .HasForeignKey("ClientFeedbackId");

                    b.HasOne("CTI.ELMS.Core.ELMS.LeadState", "Lead")
                        .WithMany("ActivityList")
                        .HasForeignKey("LeadID");

                    b.HasOne("CTI.ELMS.Core.ELMS.LeadTaskState", "LeadTask")
                        .WithMany("ActivityList")
                        .HasForeignKey("LeadTaskId");

                    b.HasOne("CTI.ELMS.Core.ELMS.NextStepState", "NextStep")
                        .WithMany("ActivityList")
                        .HasForeignKey("NextStepId");

                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("ActivityList")
                        .HasForeignKey("ProjectID");

                    b.Navigation("ClientFeedback");

                    b.Navigation("Lead");

                    b.Navigation("LeadTask");

                    b.Navigation("NextStep");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.AnnualIncrementHistoryState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.UnitOfferedHistoryState", "UnitOfferedHistory")
                        .WithMany("AnnualIncrementHistoryList")
                        .HasForeignKey("UnitOfferedHistoryID");

                    b.Navigation("UnitOfferedHistory");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.AnnualIncrementState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.UnitOfferedState", "UnitOffered")
                        .WithMany("AnnualIncrementList")
                        .HasForeignKey("UnitOfferedID");

                    b.Navigation("UnitOffered");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApprovalRecordState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ApproverSetupState", "ApproverSetup")
                        .WithMany()
                        .HasForeignKey("ApproverSetupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApproverSetup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApprovalState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ApprovalRecordState", "ApprovalRecord")
                        .WithMany("ApprovalList")
                        .HasForeignKey("ApprovalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovalRecord");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApproverAssignmentState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ApproverSetupState", "ApproverSetup")
                        .WithMany("ApproverAssignmentList")
                        .HasForeignKey("ApproverSetupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApproverSetup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.BusinessNatureCategoryState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.BusinessNatureSubItemState", "BusinessNatureSubItem")
                        .WithMany("BusinessNatureCategoryList")
                        .HasForeignKey("BusinessNatureSubItemID");

                    b.Navigation("BusinessNatureSubItem");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.BusinessNatureSubItemState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.BusinessNatureState", "BusinessNature")
                        .WithMany("BusinessNatureSubItemList")
                        .HasForeignKey("BusinessNatureID");

                    b.Navigation("BusinessNature");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ContactPersonState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.LeadState", "Lead")
                        .WithMany("ContactPersonList")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CTI.ELMS.Core.ELMS.SalutationState", "Salutation")
                        .WithMany("ContactPersonList")
                        .HasForeignKey("SalutationID");

                    b.Navigation("Lead");

                    b.Navigation("Salutation");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ContactState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.LeadState", "Lead")
                        .WithMany("ContactList")
                        .HasForeignKey("LeadID");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.EntityGroupState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.PPlusConnectionSetupState", "PPlusConnectionSetup")
                        .WithMany("EntityGroupList")
                        .HasForeignKey("PPlusConnectionSetupID");

                    b.Navigation("PPlusConnectionSetup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCAARAllocationState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("IFCAARAllocationList")
                        .HasForeignKey("ProjectID");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCAARLedgerState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("IFCAARLedgerList")
                        .HasForeignKey("ProjectID");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCATenantInformationState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.OfferingState", "Offering")
                        .WithMany("IFCATenantInformationList")
                        .HasForeignKey("OfferingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("IFCATenantInformationList")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offering");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCATransactionTypeState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.EntityGroupState", "EntityGroup")
                        .WithMany("IFCATransactionTypeList")
                        .HasForeignKey("EntityID");

                    b.Navigation("EntityGroup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCAUnitInformationState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.IFCATenantInformationState", "IFCATenantInformation")
                        .WithMany("IFCAUnitInformationList")
                        .HasForeignKey("IFCATenantInformationID");

                    b.HasOne("CTI.ELMS.Core.ELMS.UnitState", "Unit")
                        .WithMany("IFCAUnitInformationList")
                        .HasForeignKey("UnitID");

                    b.Navigation("IFCATenantInformation");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.BusinessNatureCategoryState", "BusinessNatureCategory")
                        .WithMany("LeadList")
                        .HasForeignKey("BusinessNatureCategoryID");

                    b.HasOne("CTI.ELMS.Core.ELMS.BusinessNatureState", "BusinessNature")
                        .WithMany("LeadList")
                        .HasForeignKey("BusinessNatureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CTI.ELMS.Core.ELMS.BusinessNatureSubItemState", "BusinessNatureSubItem")
                        .WithMany("LeadList")
                        .HasForeignKey("BusinessNatureSubItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CTI.ELMS.Core.ELMS.LeadSourceState", "LeadSource")
                        .WithMany("LeadList")
                        .HasForeignKey("LeadSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CTI.ELMS.Core.ELMS.LeadTouchPointState", "LeadTouchPoint")
                        .WithMany("LeadList")
                        .HasForeignKey("LeadTouchpointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CTI.ELMS.Core.ELMS.OperationTypeState", "OperationType")
                        .WithMany("LeadList")
                        .HasForeignKey("OperationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessNature");

                    b.Navigation("BusinessNatureCategory");

                    b.Navigation("BusinessNatureSubItem");

                    b.Navigation("LeadSource");

                    b.Navigation("LeadTouchPoint");

                    b.Navigation("OperationType");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadTaskClientFeedBackState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ClientFeedbackState", "ClientFeedback")
                        .WithMany("LeadTaskClientFeedBackList")
                        .HasForeignKey("ClientFeedbackId");

                    b.HasOne("CTI.ELMS.Core.ELMS.LeadTaskState", "LeadTask")
                        .WithMany("LeadTaskClientFeedBackList")
                        .HasForeignKey("LeadTaskId");

                    b.Navigation("ClientFeedback");

                    b.Navigation("LeadTask");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadTaskNextStepState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ClientFeedbackState", "ClientFeedback")
                        .WithMany("LeadTaskNextStepList")
                        .HasForeignKey("ClientFeedbackId");

                    b.HasOne("CTI.ELMS.Core.ELMS.LeadTaskState", "LeadTask")
                        .WithMany("LeadTaskNextStepList")
                        .HasForeignKey("LeadTaskId");

                    b.HasOne("CTI.ELMS.Core.ELMS.NextStepState", "NextStep")
                        .WithMany("LeadTaskNextStepList")
                        .HasForeignKey("NextStepId");

                    b.Navigation("ClientFeedback");

                    b.Navigation("LeadTask");

                    b.Navigation("NextStep");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.OfferingHistoryState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.LeadState", "Lead")
                        .WithMany("OfferingHistoryList")
                        .HasForeignKey("LeadID");

                    b.HasOne("CTI.ELMS.Core.ELMS.OfferingState", "Offering")
                        .WithMany("OfferingHistoryList")
                        .HasForeignKey("OfferingID");

                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("OfferingHistoryList")
                        .HasForeignKey("ProjectID");

                    b.Navigation("Lead");

                    b.Navigation("Offering");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.OfferingState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.LeadState", "Lead")
                        .WithMany("OfferingList")
                        .HasForeignKey("LeadID");

                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("OfferingList")
                        .HasForeignKey("ProjectID");

                    b.Navigation("Lead");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.PreSelectedUnitState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.OfferingState", "Offering")
                        .WithMany("PreSelectedUnitList")
                        .HasForeignKey("OfferingID");

                    b.HasOne("CTI.ELMS.Core.ELMS.UnitState", "Unit")
                        .WithMany("PreSelectedUnitList")
                        .HasForeignKey("UnitID");

                    b.Navigation("Offering");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ProjectState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.EntityGroupState", "EntityGroup")
                        .WithMany("ProjectList")
                        .HasForeignKey("EntityGroupId");

                    b.Navigation("EntityGroup");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ReportTableCollectionDetailState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.IFCATenantInformationState", "IFCATenantInformation")
                        .WithMany("ReportTableCollectionDetailList")
                        .HasForeignKey("IFCATenantInformationID");

                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("ReportTableCollectionDetailList")
                        .HasForeignKey("ProjectID");

                    b.Navigation("IFCATenantInformation");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitActivityState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ActivityHistoryState", "ActivityHistory")
                        .WithMany("UnitActivityList")
                        .HasForeignKey("ActivityHistoryID");

                    b.HasOne("CTI.ELMS.Core.ELMS.ActivityState", "Activity")
                        .WithMany("UnitActivityList")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CTI.ELMS.Core.ELMS.UnitState", "Unit")
                        .WithMany("UnitActivityList")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ActivityHistory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitBudgetState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.UnitBudgetState", "UnitBudget")
                        .WithMany("UnitBudgetList")
                        .HasForeignKey("ParentUnitBudgetID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("UnitBudgetList")
                        .HasForeignKey("ProjectID");

                    b.HasOne("CTI.ELMS.Core.ELMS.UnitState", "Unit")
                        .WithMany("UnitBudgetList")
                        .HasForeignKey("UnitID");

                    b.Navigation("Project");

                    b.Navigation("Unit");

                    b.Navigation("UnitBudget");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitGroupState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.OfferingHistoryState", "OfferingHistory")
                        .WithMany("UnitGroupList")
                        .HasForeignKey("OfferingHistoryID");

                    b.Navigation("OfferingHistory");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitOfferedHistoryState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.OfferingHistoryState", "OfferingHistory")
                        .WithMany("UnitOfferedHistoryList")
                        .HasForeignKey("OfferingHistoryID");

                    b.HasOne("CTI.ELMS.Core.ELMS.OfferingState", "Offering")
                        .WithMany("UnitOfferedHistoryList")
                        .HasForeignKey("OfferingID");

                    b.HasOne("CTI.ELMS.Core.ELMS.UnitState", "Unit")
                        .WithMany("UnitOfferedHistoryList")
                        .HasForeignKey("UnitID");

                    b.Navigation("Offering");

                    b.Navigation("OfferingHistory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitOfferedState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.OfferingState", "Offering")
                        .WithMany("UnitOfferedList")
                        .HasForeignKey("OfferingID");

                    b.HasOne("CTI.ELMS.Core.ELMS.UnitState", "Unit")
                        .WithMany("UnitOfferedList")
                        .HasForeignKey("UnitID");

                    b.Navigation("Offering");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("UnitList")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UserProjectAssignmentState", b =>
                {
                    b.HasOne("CTI.ELMS.Core.ELMS.ProjectState", "Project")
                        .WithMany("UserProjectAssignmentList")
                        .HasForeignKey("ProjectID");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ActivityHistoryState", b =>
                {
                    b.Navigation("UnitActivityList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ActivityState", b =>
                {
                    b.Navigation("ActivityHistoryList");

                    b.Navigation("UnitActivityList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApprovalRecordState", b =>
                {
                    b.Navigation("ApprovalList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ApproverSetupState", b =>
                {
                    b.Navigation("ApproverAssignmentList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.BusinessNatureCategoryState", b =>
                {
                    b.Navigation("LeadList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.BusinessNatureState", b =>
                {
                    b.Navigation("BusinessNatureSubItemList");

                    b.Navigation("LeadList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.BusinessNatureSubItemState", b =>
                {
                    b.Navigation("BusinessNatureCategoryList");

                    b.Navigation("LeadList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ClientFeedbackState", b =>
                {
                    b.Navigation("ActivityHistoryList");

                    b.Navigation("ActivityList");

                    b.Navigation("LeadTaskClientFeedBackList");

                    b.Navigation("LeadTaskNextStepList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.EntityGroupState", b =>
                {
                    b.Navigation("IFCATransactionTypeList");

                    b.Navigation("ProjectList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.IFCATenantInformationState", b =>
                {
                    b.Navigation("IFCAUnitInformationList");

                    b.Navigation("ReportTableCollectionDetailList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadSourceState", b =>
                {
                    b.Navigation("LeadList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadState", b =>
                {
                    b.Navigation("ActivityList");

                    b.Navigation("ContactList");

                    b.Navigation("ContactPersonList");

                    b.Navigation("OfferingHistoryList");

                    b.Navigation("OfferingList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadTaskState", b =>
                {
                    b.Navigation("ActivityHistoryList");

                    b.Navigation("ActivityList");

                    b.Navigation("LeadTaskClientFeedBackList");

                    b.Navigation("LeadTaskNextStepList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.LeadTouchPointState", b =>
                {
                    b.Navigation("LeadList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.NextStepState", b =>
                {
                    b.Navigation("ActivityHistoryList");

                    b.Navigation("ActivityList");

                    b.Navigation("LeadTaskNextStepList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.OfferingHistoryState", b =>
                {
                    b.Navigation("UnitGroupList");

                    b.Navigation("UnitOfferedHistoryList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.OfferingState", b =>
                {
                    b.Navigation("IFCATenantInformationList");

                    b.Navigation("OfferingHistoryList");

                    b.Navigation("PreSelectedUnitList");

                    b.Navigation("UnitOfferedHistoryList");

                    b.Navigation("UnitOfferedList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.OperationTypeState", b =>
                {
                    b.Navigation("LeadList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.PPlusConnectionSetupState", b =>
                {
                    b.Navigation("EntityGroupList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.ProjectState", b =>
                {
                    b.Navigation("ActivityList");

                    b.Navigation("IFCAARAllocationList");

                    b.Navigation("IFCAARLedgerList");

                    b.Navigation("IFCATenantInformationList");

                    b.Navigation("OfferingHistoryList");

                    b.Navigation("OfferingList");

                    b.Navigation("ReportTableCollectionDetailList");

                    b.Navigation("UnitBudgetList");

                    b.Navigation("UnitList");

                    b.Navigation("UserProjectAssignmentList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.SalutationState", b =>
                {
                    b.Navigation("ContactPersonList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitBudgetState", b =>
                {
                    b.Navigation("UnitBudgetList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitOfferedHistoryState", b =>
                {
                    b.Navigation("AnnualIncrementHistoryList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitOfferedState", b =>
                {
                    b.Navigation("AnnualIncrementList");
                });

            modelBuilder.Entity("CTI.ELMS.Core.ELMS.UnitState", b =>
                {
                    b.Navigation("IFCAUnitInformationList");

                    b.Navigation("PreSelectedUnitList");

                    b.Navigation("UnitActivityList");

                    b.Navigation("UnitBudgetList");

                    b.Navigation("UnitOfferedHistoryList");

                    b.Navigation("UnitOfferedList");
                });
#pragma warning restore 612, 618
        }
    }
}
