@using Models
@model ProjectViewModel
<script asp-add-nonce>
    $(document).ready(function () { 
		$.InitializeOfferingHistoryFieldValidations = function(count)
        {
			let reqs = [];			
			for (let idx = 0; idx < count; idx++) {
				reqs.push({name: "OfferingHistoryList[" + idx + "].OfferingID", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Offering"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].Status", el: "Input", minlength:0, maxlength:35, isrequired: false, description: "Status"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].CommencementDate", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Commencement Date"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TerminationDate", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Termination Date"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].Year", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Year"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].Month", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Month"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].Day", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Day"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].SecMonths", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Sec Months"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].ConstructionMonths", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Construction Months"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].BoardUp", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Board Up"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].OtherChargesAircon", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Other Charges / Aircon"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].ConstructionCAMC", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Costruction CAMC"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].CommencementCAMC", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Commencement CAMC"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].Concession", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Concession"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].OffersheetRemarks", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Offersheet Remarks"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].UnitsInformation", el: "Input", minlength:0, maxlength:0, isrequired: true, description: "Units Information"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].ANType", el: "Input", minlength:0, maxlength:100, isrequired: false, description: "AN Type"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].LeadID", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Lead"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].ProjectID", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Project"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TotalUnitArea", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Total Unit Area"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TotalSecurityDeposit", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Total Security Deposit"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].AnnualAdvertisingFee", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Annual Advertising Fee"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].CAMCConstructionTotalUnitArea", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "CAMC Construction Total"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].ConstructionCAMCMonths", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Construction CAMC Months"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].ConstructionCAMCRate", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Construction CAMC Rate"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].HasBoardUpFee", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Has Board Fee"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].SecurityDepositPayableWithinMonths", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Security Deposit Payable Within Months"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TotalConstructionBond", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Total Construction Bond"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].ConstructionPayableWithinMonths", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Construction Payable Within Months"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].IsPOS", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Is POS"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].Location", el: "Input", minlength:0, maxlength:0, isrequired: true, description: "Location"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].OfferingVersion", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Offering Version"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TotalBasicFixedMonthlyRent", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Total Basic Fixed Monthly Rent"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TotalMinimumMonthlyRent", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Total Minimum Monthly Rent"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TotalLotBudget", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Total Lot Budget"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TotalPercentageRent", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Total Percentage Rent"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].AutoComputeTotalConstructionBond", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Auto-compute Total Construction Bond"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].AutoComputeTotalSecurityDeposit", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Auto-compute Total Security Deposit"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].MinimumSalesQuota", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Minimum Sales Quota"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].UnitType", el: "Input", minlength:0, maxlength:0, isrequired: true, description: "Unit Type"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].Provision", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Provision"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].FitOutPeriod", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Fit-Out Period"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].TurnOverDate", el: "Input", minlength:0, maxlength:0, isrequired: true, description: "Turn Over Date"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].AutoComputeAnnualAdvertisingFee", el: "Input", minlength:0, maxlength:0, isrequired: false, description: "Auto Compute Annual Advertising Fee"});
				reqs.push({name: "OfferingHistoryList[" + idx + "].BookingDate", el: "Input", minlength:0, maxlength:0, isrequired: true, description: "Booking Date"});
				
			}
			let validator = $("#project-form").validate();
			for (let j in reqs)
			{
				let e = reqs[j];
				let el = $(`*[name="${e.name}"]`);
				el.rules("add", {
					required: {                
						depends: function(element) {
							return e.isrequired;
						}
					},
					messages: {
						required: (e.description === '') ? 'this field is required' : `'${e.description}' is required`,
					},
				});
				if(e.isrequired == true)
				{
					let labelElement = $(`label[name="Label.${e.name}"]`);
					$(labelElement).addClass("fieldrequired");
				}
				if(e.maxlength > 0) {el.attr('maxlength', e.maxlength);}
				if(e.minlength > 0) {el.attr('minlength', e.minlength);}   
			} 
		}       
    });
</script>