@page
@model IndexModel

@section Styles {
    <partial name="_DataTableStyles" />
}

@{
    ViewData["Title"] = Localizer["Projects List"];
    ViewData["ActiveMainPage"] = "Projects";
}
<div class="card">
    <div class="card-body">
        <table id="projects" class="table table-hover table-bordered table-striped">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Project!.Code)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Project!.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Project!.Type)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Project!.Status)
                    </th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<a id="back-to-top" href="#" class="btn btn-primary back-to-top" role="button" aria-label="Scroll to top">
    <i class="fas fa-chevron-up"></i>
</a>

<partial name="_FormModalPartial" />

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <partial name="_DataTableScripts" />
    <script asp-add-nonce>
	$(document).ready(function () {
		var table = $('#projects').DataTable({
			serverSide: true,
			order: [[ 4, 'asc' ]],
			ajax:
			{
				url: '@Url.Page("/Projects/Index", new { area = "Inventory", handler = "ListAll" })',
				type: "POST",
				headers: {
					RequestVerificationToken:
						$('input:hidden[name="__RequestVerificationToken"]').val()
				},
			},
			columns: [
				{ data: "code", name: "Code", title: '@Localizer["Code"]' },
				{ data: "name", name: "Name", title: '@Localizer["Name"]' },
				{ data: "type", name: "Type", title: '@Localizer["Type"]' },
				{ data: "status", name: "Status", title: '@Localizer["Status"]' },
				{ data: "lastModifiedDate", name: "LastModifiedDate", title: "LastModifiedDate", visible: false, searchable: false },
			],
			buttons: [
		@if ((await AuthorizationService.AuthorizeAsync(User, Permission.Projects.Create)).Succeeded)
		{
			<text>
				{
					text: '@Localizer["Add"]',
					action: function (e, dt, button, config) {
						var title = '@Localizer["Add Project"]';
						var url = '@Url.Page("/Projects/Add", new { area = "Inventory", handler = "Add" })';
						openFormModal(url, title, function() {
							dt.order([dt.init().columns.length - 1, 'asc']).page('last').draw(false);
						});
					},
				},
			</text>
		}
		@if ((await AuthorizationService.AuthorizeAsync(User, Permission.Projects.Edit)).Succeeded)
		{
			<text>
				{
					extend: 'selectedSingle',
					text: '@Localizer["Edit"]',
					action: function (e, dt, button, config) {
						var title = '@Localizer["Edit Project"]';
						var url = '@Url.Page("/Projects/Edit", new { area = "Inventory", handler = "Details" })' + '&id=' + dt.row({ selected: true }).data().id;
						openFormModal(url, title, function() {
							if(dt.order()[0][0] == dt.init().columns.length - 1)
							{
								dt.page('last').draw(false);
							}
							else
							{
								dt.ajax.reload(null, false);
							}
						});
					},
				},
			</text>
		}
		@if ((await AuthorizationService.AuthorizeAsync(User, Permission.Projects.Delete)).Succeeded)
		{
			<text>
				{
					extend: 'selectedSingle',
					text: '@Localizer["Delete"]',
					action: function (e, dt, button, config) {
						var title = '@Localizer["Delete Project"]';
						var url = '@Url.Page("/Projects/Delete", new { area = "Inventory", handler = "Delete" })' + '&id=' + dt.row({ selected: true }).data().id;
						openFormModal(url, title, function() {
							dt.ajax.reload(null, false);
						});
					},
				},
			</text>
		}
				'excel', 'pdf', 'pageLength',
			],
		});
	});
    </script>
}